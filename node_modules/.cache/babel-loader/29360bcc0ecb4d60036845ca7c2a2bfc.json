{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\etvartavukvar\\\\Desktop\\\\Bitirme github\\\\coagusearch-frontend\\\\bloodbank-web\\\\src\\\\App\\\\App.js\";\nimport React, { Component } from 'react';\nimport logo from './logo.jpg';\nimport './App.css';\nimport HttpService from '../services/http-service';\nimport Bloodreq from '../bloodreq/bloodreq';\nimport Bloodbank from '../bloodbank/bloodbank';\nimport Details from '../details/details';\nimport { createAppContainer } from \"react-navigation\";\nimport { createStackNavigator } from \"react-navigation-stack\";\nimport { createDrawerNavigator } from \"react-navigation-drawer\";\nimport { AppLoading } from \"expo\";\nimport * as Font from \"expo-font\";\nimport Deneme from \"../details/deneme\";\nvar needUpdate = false;\nvar newLength;\nvar oldLength;\nconst DrawerNavigation = createDrawerNavigator({\n  Deneme: Deneme\n});\nconst StackNavigation = createStackNavigator({\n  DrawerNavigation: {\n    screen: DrawerNavigation\n  },\n  Deneme: Deneme\n}, {\n  headerMode: \"none\"\n});\nconst http = new HttpService();\nvar oldLength, newlength;\nconst AppContainer = createAppContainer(StackNavigation);\n\nasync function loadResourcesAsync() {\n  await Promise.all([Font.loadAsync({\n    \"roboto-regular\": require(\"./src/assets/fonts/roboto-regular.ttf\")\n  })]);\n}\n\nfunction handleLoadingError(error) {\n  console.warn(error);\n}\n\nfunction handleFinishLoading(setLoadingComplete) {\n  setLoadingComplete(true);\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.loadBloodReqsToOrder = () => {\n      var self = this;\n      http.getBloodReqs().then(bloodreqs => {\n        self.setState({\n          bloodreq: bloodreqs\n        });\n        if (self.state.bloodreq.length != 0) oldLength = self.state.bloodreq.length;\n      }, err => {});\n    };\n\n    this.loadBloodReqs = () => {\n      var self = this;\n      setInterval(function () {\n        http.getBloodReqs().then(bloodreqs => {\n          self.setState({\n            bloodreq: bloodreqs\n          });\n          var orderedList = self.state.bloodreq.sort();\n          orderedList = orderedList.reverse();\n          self.setState({\n            bloodreq: orderedList\n          });\n        }, err => {});\n      }, 1000);\n    };\n\n    this.loadBloodBank = () => {\n      var self = this;\n      setInterval(function () {\n        http.getBloodBank().then(data => {\n          self.setState({\n            bloodbank: data\n          });\n        }, err => {});\n      }, 1000);\n    };\n\n    this.bloodbankList = () => {\n      const list = this.state.bloodbank.map(bloodbank => React.createElement(\"div\", {\n        className: \"col-sm\",\n        key: bloodbank._id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(Bloodbank, {\n        ffp_0pos: bloodbank.ffp_0pos,\n        ffp_0neg: bloodbank.ffp_0neg,\n        ffp_Apos: bloodbank.ffp_Apos,\n        ffp_Aneg: bloodbank.ffp_Aneg,\n        ffp_Bpos: bloodbank.ffp_Bpos,\n        ffp_Bneg: bloodbank.ffp_Bneg,\n        ffp_ABpos: bloodbank.ffp_ABpos,\n        ffp_ABneg: bloodbank.ffp_ABneg,\n        pc_0pos: bloodbank.pc_0pos,\n        pc_0neg: bloodbank.pc_0neg,\n        pc_Apos: bloodbank.pc_Apos,\n        pc_Aneg: bloodbank.pc_Aneg,\n        pc_Bpos: bloodbank.pc_Bpos,\n        pc_Bneg: bloodbank.pc_Bneg,\n        pc_ABpos: bloodbank.pc_ABpos,\n        pc_ABneg: bloodbank.pc_ABneg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      })));\n      return list;\n    };\n\n    this.bloodreqList = () => {\n      const list = this.state.bloodreq.map(bloodreq => React.createElement(\"div\", {\n        className: \"col-sm\",\n        key: bloodreq._id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, React.createElement(Bloodreq, {\n        req_date: bloodreq.req_date,\n        req_time: bloodreq.req_time,\n        blood_type_name: bloodreq.blood_type_name,\n        units: bloodreq.units,\n        requester_name: bloodreq.requester_name,\n        req_status: bloodreq.req_status,\n        needUpdate: bloodreq.isUpdated,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      })));\n      return list;\n    };\n\n    this.state = {\n      bloodbank: [],\n      bloodreq: [],\n      details: []\n    }; //Bind Functions\n\n    this.loadBloodReqs = this.loadBloodReqs.bind(this);\n    this.loadBloodReqs();\n    this.loadBloodReqsToOrder = this.loadBloodReqsToOrder.bind(this);\n    this.loadBloodReqsToOrder();\n    this.loadBloodBank = this.loadBloodBank.bind(this);\n    this.loadBloodBank();\n\n    var _self = this;\n\n    setTimeout(function afterOneSeconds() {\n      _self.bloodreqList = _self.bloodreqList.bind(_self);\n      _self.bloodbankList = _self.bloodbankList.bind(_self);\n      console.log(_self.state.bloodreq);\n      console.log(\"old: \" + oldLength);\n      console.log(\"new: \" + newlength);\n\n      var orderedList = _self.state.bloodreq.sort();\n\n      orderedList = orderedList.reverse(); // self.setState({ bloodreq: orderedList });\n\n      setTimeout(function afterOneSeconds() {}, 1000);\n    }, 1000);\n  }\n\n  render() {\n    const [isLoadingComplete, setLoadingComplete] = useState(false);\n\n    if (!isLoadingComplete) {\n      return React.createElement(AppLoading, {\n        startAsync: loadResourcesAsync,\n        onError: handleLoadingError,\n        onFinish: () => handleFinishLoading(setLoadingComplete),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      });\n    } else {\n      return isLoadingComplete ? React.createElement(AppContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }) : React.createElement(AppLoading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      });\n    }\n  }\n  /* render() {\n     return (\n       <div className=\"App\">\n         <div className=\"App-header\">\n           <img src={logo} className=\"App-logo\" alt=\"\" />\n           <h2>National Blood Bank</h2>\n         </div>\n         <div>\n           {this.bloodbankList()}\n         </div>\n         <div className=\"App-main\">\n           <div className=\"table\">\n             <table>\n               <Details />\n             </table>\n             <div className=\"table\">\n               {this.bloodreqList()}\n             </div>\n           </div>\n         </div>\n       </div>\n     );\n   }\n  */\n\n\n}\n/*\n   render() {\n   return (\n     <div className=\"App-main\">\n       <div className = \"table\">\n       <table>\n         <thead>\n                   <tr>\n                       <td>Request Date</td>\n                       <td>Request Time</td>\n                       <td>Blood Type</td>\n                       <td>Unit(s)</td>\n                       <td>Requester Name</td>\n                       <td>Request Status</td>\n                   </tr>\n               </thead> \n         </table>\n         <table>\n         {this.bloodreqList()}\n         </table>\n       </div>\n     </div>\n   );\n }\n*/\n\n/*function App() {\n\n  constructor(props){\n    super(props);\n    http.getBloodReqs();\n  }\n\n \n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h2>This is the National-BloodBank</h2>\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          //href=\"https://reactjs.org\"\n          href=\"https://www.google.com\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}*/\n\n\nexport default App;","map":{"version":3,"sources":["C:/Users/etvartavukvar/Desktop/Bitirme github/coagusearch-frontend/bloodbank-web/src/App/App.js"],"names":["React","Component","logo","HttpService","Bloodreq","Bloodbank","Details","createAppContainer","createStackNavigator","createDrawerNavigator","AppLoading","Font","Deneme","needUpdate","newLength","oldLength","DrawerNavigation","StackNavigation","screen","headerMode","http","newlength","AppContainer","loadResourcesAsync","Promise","all","loadAsync","require","handleLoadingError","error","console","warn","handleFinishLoading","setLoadingComplete","App","constructor","props","loadBloodReqsToOrder","self","getBloodReqs","then","bloodreqs","setState","bloodreq","state","length","err","loadBloodReqs","setInterval","orderedList","sort","reverse","loadBloodBank","getBloodBank","data","bloodbank","bloodbankList","list","map","_id","ffp_0pos","ffp_0neg","ffp_Apos","ffp_Aneg","ffp_Bpos","ffp_Bneg","ffp_ABpos","ffp_ABneg","pc_0pos","pc_0neg","pc_Apos","pc_Aneg","pc_Bpos","pc_Bneg","pc_ABpos","pc_ABneg","bloodreqList","req_date","req_time","blood_type_name","units","requester_name","req_status","isUpdated","details","bind","setTimeout","afterOneSeconds","log","render","isLoadingComplete","useState"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.jpg';\nimport './App.css';\nimport HttpService from '../services/http-service';\nimport Bloodreq from '../bloodreq/bloodreq';\nimport Bloodbank from '../bloodbank/bloodbank';\nimport Details from '../details/details';\n\nimport { createAppContainer } from \"react-navigation\";\nimport { createStackNavigator } from \"react-navigation-stack\";\nimport { createDrawerNavigator } from \"react-navigation-drawer\";\nimport { AppLoading } from \"expo\";\nimport * as Font from \"expo-font\";\nimport Deneme from \"../details/deneme\";\n\nvar needUpdate = false;\nvar newLength;\nvar oldLength;\n\nconst DrawerNavigation = createDrawerNavigator({ Deneme: Deneme });\n\nconst StackNavigation = createStackNavigator(\n  {\n    DrawerNavigation: {\n      screen: DrawerNavigation\n    },\n    Deneme: Deneme\n  },\n  {\n    headerMode: \"none\"\n  }\n);\n\n\n\n\nconst http = new HttpService();\nvar oldLength, newlength;\nconst AppContainer = createAppContainer(StackNavigation);\n\nasync function loadResourcesAsync() {\n  await Promise.all([\n    Font.loadAsync({\n      \"roboto-regular\": require(\"./src/assets/fonts/roboto-regular.ttf\")\n    })\n  ]);\n}\nfunction handleLoadingError(error) {\n  console.warn(error);\n}\n\nfunction handleFinishLoading(setLoadingComplete) {\n  setLoadingComplete(true);\n}\n\n\n\n\n\nclass App extends Component {\n\n  \n\n \n  constructor(props) {\n    super(props);\n\n    this.state = { bloodbank: [], bloodreq: [], details: [] };\n    //Bind Functions\n    this.loadBloodReqs = this.loadBloodReqs.bind(this);\n    this.loadBloodReqs();\n\n\n    this.loadBloodReqsToOrder = this.loadBloodReqsToOrder.bind(this);\n    this.loadBloodReqsToOrder();\n\n    this.loadBloodBank = this.loadBloodBank.bind(this);\n    this.loadBloodBank();\n\n    var self = this;\n\n\n   \n\n    setTimeout(function afterOneSeconds() {\n      self.bloodreqList = self.bloodreqList.bind(self);\n      self.bloodbankList = self.bloodbankList.bind(self);\n     \n      console.log(self.state.bloodreq);\n      console.log(\"old: \" + oldLength);\n      console.log(\"new: \"+ newlength);\n      \n      var orderedList = self.state.bloodreq.sort();\n      orderedList = orderedList.reverse();\n     // self.setState({ bloodreq: orderedList });\n     setTimeout(function afterOneSeconds() {\n      \n     }, 1000) \n     \n      \n    }, 1000)\n\n\n  }\n  \n\n  loadBloodReqsToOrder = () => {\n    var self = this;\n      http.getBloodReqs().then(bloodreqs => {\n        self.setState({ bloodreq: bloodreqs })\n        if(self.state.bloodreq.length != 0) oldLength = self.state.bloodreq.length;\n      }, err => {\n      });\n     \n  }\n\n\n  loadBloodReqs = () => {\n    \n    var self = this;\n    setInterval(function(){\n      http.getBloodReqs().then(bloodreqs => {\n        self.setState({ bloodreq: bloodreqs })\n        var orderedList = self.state.bloodreq.sort();\n        orderedList = orderedList.reverse();\n        self.setState({ bloodreq: orderedList });\n      }, err => {\n      });\n      \n    }, 1000); \n  }\n\n  loadBloodBank = () => {\n    var self = this;\n    setInterval(function(){ \n      http.getBloodBank().then(data => {\n        self.setState({ bloodbank: data })\n      }, err => {\n      });\n    }, 1000);\n\n  }\n\n\n\n  \n\n  bloodbankList = () => {\n    const list = this.state.bloodbank.map((bloodbank) =>\n\n      <div className=\"col-sm\" key={bloodbank._id}>\n        <Bloodbank\n          ffp_0pos={bloodbank.ffp_0pos} ffp_0neg={bloodbank.ffp_0neg} ffp_Apos={bloodbank.ffp_Apos} ffp_Aneg={bloodbank.ffp_Aneg}\n          ffp_Bpos={bloodbank.ffp_Bpos} ffp_Bneg={bloodbank.ffp_Bneg} ffp_ABpos={bloodbank.ffp_ABpos} ffp_ABneg={bloodbank.ffp_ABneg}\n\n          pc_0pos={bloodbank.pc_0pos} pc_0neg={bloodbank.pc_0neg} pc_Apos={bloodbank.pc_Apos} pc_Aneg={bloodbank.pc_Aneg}\n          pc_Bpos={bloodbank.pc_Bpos} pc_Bneg={bloodbank.pc_Bneg} pc_ABpos={bloodbank.pc_ABpos} pc_ABneg={bloodbank.pc_ABneg}\n        />\n      </div>\n    );\n    return (list);\n  }\n\n\n  bloodreqList = () => {\n    const list = this.state.bloodreq.map((bloodreq) =>\n      <div className=\"col-sm\" key={bloodreq._id}>\n        <Bloodreq\n          req_date={bloodreq.req_date} req_time={bloodreq.req_time} blood_type_name={bloodreq.blood_type_name}\n          units={bloodreq.units} requester_name={bloodreq.requester_name} req_status={bloodreq.req_status}\n          needUpdate={bloodreq.isUpdated}\n        />\n      </div>\n    );\n    return (list);\n  }\n  render(){\n    const [isLoadingComplete, setLoadingComplete] = useState(false);\n    if (!isLoadingComplete) {\n      return (\n        <AppLoading\n          startAsync={loadResourcesAsync}\n          onError={handleLoadingError}\n          onFinish={() => handleFinishLoading(setLoadingComplete)}\n        />\n      );\n    } else {\n      return isLoadingComplete ? <AppContainer /> : <AppLoading />;\n    }\n  }\n\n\n  \n\n\n\n\n /* render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"\" />\n          <h2>National Blood Bank</h2>\n        </div>\n        <div>\n          {this.bloodbankList()}\n        </div>\n        <div className=\"App-main\">\n          <div className=\"table\">\n            <table>\n              <Details />\n            </table>\n            <div className=\"table\">\n              {this.bloodreqList()}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n*/\n\n\n\n}\n\n\n\n  /*\n \n   render() {\n     return (\n       <div className=\"App-main\">\n         <div className = \"table\">\n         <table>\n           <thead>\n                     <tr>\n                         <td>Request Date</td>\n                         <td>Request Time</td>\n                         <td>Blood Type</td>\n                         <td>Unit(s)</td>\n                         <td>Requester Name</td>\n                         <td>Request Status</td>\n                     </tr>\n                 </thead> \n           </table>\n           <table>\n           {this.bloodreqList()}\n           </table>\n         </div>\n       </div>\n     );\n   }\n */\n\n\n\n\n\n\n\n\n/*function App() {\n\n  constructor(props){\n    super(props);\n    http.getBloodReqs();\n  }\n\n \n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h2>This is the National-BloodBank</h2>\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          //href=\"https://reactjs.org\"\n          href=\"https://www.google.com\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}*/\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}